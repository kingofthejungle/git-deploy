#!/usr/bin/env ruby
  

#
# based on great work of Aizat Faiz
# https://github.com/aizatto/git-deploy
#
# imporved by Michal Svec, 2011
# https://github.com/kingofthejungle/git-deploy
#

deploy = 'deploy.yml'

unless File.exists? deploy
  puts "File does not exist: " + deploy
  exit
end                    

# 
if ARGV[0].nil? || ARGV[0].empty?
  mode = 'default'
else
  mode = ARGV[0]
end


require 'rubygems'
require 'timeout'
require 'yaml'
require 'uri'
require 'net/ftp'
require 'tempfile'


# Store the current revision
revision = `git rev-parse HEAD`.chomp.strip
revision_file = Tempfile.new revision
revision_file.write revision
revision_file.close

service_failures = {}

services = YAML.load_file deploy
settings = services.delete('settings') || {}

trap 'INT' do
  raise Interrupt, nil
end

module Git
  class << self
    def diff_uncommitted(local_path)
      command = "git diff --name-status; git diff --cached --name-status"
      changed_files(command)
    end

    # We figure out only which files need updating
    # so don't upload duplicate files
    def diff_committed(local_path, revision = nil)
      
      remote_files = {}
      if revision
        command = "git diff --name-status #{revision} -- #{local_path}"
      else
        command = "git diff --name-status HEAD^ -- #{local_path}"
      end

      changed_files(command)
    end

    def changed_files(command)
      files = `#{command}`
      puts command

      case $?.exitstatus
      when 0, 141
        # pass
      else
        return false
      end

      remote_files = {}

      files.split("\n").reverse.each do |line|
        c = line[0..0]
        c = 'M' if c == 'A'
        c = 'M' if c == 'C'

        next unless c == 'M' || c == 'D'

        file = line[2..-1]

        if remote_files.key? file
          if remote_files[file] == 'M' && c == 'D'
              remote_files[file] = 'D'
          elsif remote_files[file] == 'D' && c == 'M'
            remote_files[file] = 'M'
          end
        else
          remote_files[file] = c
        end
      end

      remote_files
    end
  end



  class Service
    attr_reader :failures

    def initialize(options)
      @host = options['host']
      @options = options
      @scheme = options['scheme']
      @failures = []
      @max_retries = options['retries'] || 1
      @max_retries = 1 if @max_retries <= 0
    end

    def automate
      upload_maintenance_file = @options['maintenance_file'] && @options['maintenance_deploy_to']

      tries = 1
      until tries > @max_retries
        self.connect
        begin
          if ! self.diff
            return
          end

          if upload_maintenance_file
            puts "Uploading Maintenance file"
            @ftp.put(@options['maintenance_file'], @options['maintenance_deploy_to'])
          end
          
          self.upload
          
          if upload_maintenance_file
            puts "Removing Maintenance file"
            @ftp.put(@options['maintenance_deploy_to'], @options['maintenance_deploy_to'])
          end
          self.disconnect
          return true
        rescue Interrupt, Errno::ETIMEDOUT, Errno::ECONNRESET, Timeout::Error => e
          tries += 1
          @failures << e

          puts "Interrupting...going to retry"

          if e.is_a? Interrupt
            begin
              Timeout::timeout(5) do
                self.disconnect
              end
            rescue
            end
          end

          if tries == @max_tries
            puts "Not retrying (#{tries} out of #{@max_retries})"
          else
            puts "Retrying (#{tries} out of #{@max_retries})"
          end
        rescue Net::FTPTempError, Net::FTPPermError => e
          @failures << e
          return  false
        end
      end

      tries != @max_retries
    end

    def diff
        @remote_files = self.diff_committed
    end

    def diff_committed
      remote_revision = self.get_remote_revision

      if @options['revision'] == remote_revision
        if @options['ignore_if_same_revision']
          puts "Same revision, ignoring"

        else
          puts "Same revision, overwriting"
          remote_files = Git.diff_committed(@options['local_path'])
        end
      else
        puts "different revisions, overwriting"
        remote_files = Git.diff_committed(@options['local_path'], "#{remote_revision}...HEAD")
      end
    end

    def upload
      length = @options['length']
      
      @remote_files.each do |local_file, modifier|

        if length != 0
          if local_file[0...length] != @options['local_path']
            next
          else
            remote_file = local_file[length..-1]
          end
        else
          remote_file = local_file
        end

        case modifier
          when 'A', 'M', 'C'
            if @options['ignore']
              # do not upload file if it's mentioned in ignore section in config file
              ignore = false
              @options['ignore'].each { |ignored|
                if local_file.match(ignored) != nil
                  ignore = true 
                  break
                end
              }

              if ignore
                puts "\tIgnoring #{local_file}"  
                next
              end
            end

            puts "\tUploading #{local_file}"
            self.put(local_file, remote_file)
          when 'D'
            puts "Deleting #{local_file}"
            self.delete(remote_file)
        end

        @remote_files.delete(local_file)
      end

      puts 'Uploading REVISION'
      self.put(@options['revision_file'].path, "REVISION")
    end
  end



  class FTP < Service
    def initialize(options)
      super(options)
      @remote_directories = {}
      @port = options['port'] || 21
    end

    def connect
      puts "Connecting to #{@host}"

      @ftp = Net::FTP.new

      if @options['passive']
        @ftp.passive = true
      end

      if @options['debug_mode']
        @ftp.debug_mode = true
      end

      @ftp.binary = true
      @ftp.connect(@options['host'], @options['port'])
      @ftp.login(@options['user'], @options['password'])

      # path is a string 
      if @options['path'].class.to_s.eql?("String")
        puts "changing dir to: "+@options['path'].to_s
        @ftp.chdir(@options['path'])
      #path is a hash with more paths - get correct path from mode (cli argument)
      else
        puts "changing dir to: "+@options['path'][@options['mode']].to_s
        @ftp.chdir(@options['path'][@options['mode']])
      end
    end

    def disconnect
      @ftp.quit
    end

    def put(local_file, remote_file)
      dir = File.dirname(remote_file)

      unless @remote_directories[dir]
        self.mkdir_p(dir)
        @remote_directories[dir] = true
      end
    
      @ftp.put(local_file, remote_file)
    end

    def delete(remote_file)
      begin
        @ftp.delete(remote_file)
      rescue Net::FTPPermError, Net::FTPReplyError => e
        # 
      end
    end

    def get_remote_revision
      remote_revision = false
      begin
        @ftp.get('REVISION', Tempfile.new(@host).path) do |line|
          remote_revision = line.strip
        end

        puts "Remote Revision: #{remote_revision}"
      rescue Net::FTPPermError => e
        raise e unless e.message[0..2] == '550'
        remote_revision = @options['revision']
      end
      remote_revision
    end

    def mkdir_p(directory)
      begin
        parent = File.dirname(directory)
        files = @ftp.nlst(parent)

        if directory == "." || files.any? { |a| a == directory }
          return
        else
          puts "Creating Directory #{directory}"
          @ftp.mkdir(directory)
        end
      rescue Net::FTPPermError
        self.mkdir_p(File.dirname(directory))
        begin
          @ftp.mkdir(directory)
        rescue Net::FTPPermError
          # pass
        end
      rescue Net::FTPTempError
        begin
          puts "Creating Directory #{directory}"
          @ftp.mkdir(directory)
        rescue Net::FTPPermError => e
          self.mkdir_p(File.dirname(directory))
          @ftp.mkdir(directory)
        end
      end
    end
  end # FTP < Service
end



services.each do |server, options|
  next if options['skip']

  next if mode != "default" && options['path'][mode].nil?

  puts "current server: "+server

  options['revision'] = revision
  options['revision_file'] = revision_file
  options['mode'] = mode
  options.merge!(settings)

  pwd = Dir.pwd

  local_path = options['local_path']

  if local_path
    if local_path[0..0] == '/'
      raise "Field `local_path` cannot be an absolute path"
    end
  else
    local_path = ''
  end

  if local_path.length != 0
    if local_path[-1..-1] != '/'
      local_path += '/'
    end

    length = local_path.length
  else
    length = 0
  end
  options['local_path'] = local_path
  options['length'] = length

  service = case options['scheme']
    when 'ftp'  then Git::FTP.new(options)
  end

  unless service.automate
    service_failures[server] = service.failures
  end
end

unless service_failures.empty?
  puts "Failures"
  service_failures.each do |server, failures|
    failures.each do |failure|
      puts "#{server}: #{failure.class} #{failure}"
    end
  end
end

revision_file.delete
